{"ast":null,"code":"var _jsxFileName = \"/Users/harrynguyen/Desktop/remind-me/src/components/Reminder.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Reminder({\n  reminder\n}) {\n  _s();\n\n  const [days, setDays] = useState(0);\n  const [hours, setHours] = useState(0);\n  const [mins, setMins] = useState(0);\n  const [secs, setSecs] = useState(0);\n\n  const findTimeLeft = () => {\n    const remindDate = reminder.date;\n    const present = new Date();\n    const secDiff = (remindDate.getTime() - present.getTime()) / 1000;\n    let timeLeft = {};\n\n    if (secDiff > 0) {\n      timeLeft = {\n        days: Math.floor(secDiff / (60 * 60 * 24)),\n        hours: Math.floor(secDiff / (60 * 60) % 24),\n        minutes: Math.floor(secDiff / 60 % 60),\n        seconds: Math.floor(secDiff % 60)\n      };\n      console.log(timeLeft);\n      setDays(timeLeft.days);\n      setHours(timeLeft.hours);\n      setMins(timeLeft.minutes);\n      setSecs(timeLeft.seconds);\n    }\n  };\n\n  useEffect(() => {\n    setInterval(() => findTimeLeft(), 1000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: reminder.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Time until Reminded: \", days, \" D \", hours, \" H \", mins, \" M \", secs, \" S\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Reminder, \"cg8Nj+s1LEI5JpqBu+nfir9EqqQ=\");\n\n_c = Reminder;\nexport default Reminder;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reminder\");","map":{"version":3,"sources":["/Users/harrynguyen/Desktop/remind-me/src/components/Reminder.js"],"names":["React","useEffect","useState","Reminder","reminder","days","setDays","hours","setHours","mins","setMins","secs","setSecs","findTimeLeft","remindDate","date","present","Date","secDiff","getTime","timeLeft","Math","floor","minutes","seconds","console","log","setInterval","text"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,SAASC,QAAT,CAAkB;AAACC,EAAAA;AAAD,CAAlB,EAA8B;AAAA;;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,CAAD,CAAhC;;AAGA,QAAMW,YAAY,GAAG,MAAM;AACvB,UAAMC,UAAU,GAAGV,QAAQ,CAACW,IAA5B;AACA,UAAMC,OAAO,GAAG,IAAIC,IAAJ,EAAhB;AACA,UAAMC,OAAO,GAAG,CAACJ,UAAU,CAACK,OAAX,KAAuBH,OAAO,CAACG,OAAR,EAAxB,IAA6C,IAA7D;AACA,QAAIC,QAAQ,GAAG,EAAf;;AAEA,QAAIF,OAAO,GAAG,CAAd,EAAiB;AACbE,MAAAA,QAAQ,GAAG;AACPf,QAAAA,IAAI,EAAEgB,IAAI,CAACC,KAAL,CAAWJ,OAAO,IAAI,KAAK,EAAL,GAAU,EAAd,CAAlB,CADC;AAEPX,QAAAA,KAAK,EAAEc,IAAI,CAACC,KAAL,CAAYJ,OAAO,IAAI,KAAK,EAAT,CAAR,GAAwB,EAAnC,CAFA;AAGPK,QAAAA,OAAO,EAAEF,IAAI,CAACC,KAAL,CAAYJ,OAAO,GAAG,EAAX,GAAiB,EAA5B,CAHF;AAIPM,QAAAA,OAAO,EAAEH,IAAI,CAACC,KAAL,CAAWJ,OAAO,GAAG,EAArB;AAJF,OAAX;AAMAO,MAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACAd,MAAAA,OAAO,CAACc,QAAQ,CAACf,IAAV,CAAP;AACAG,MAAAA,QAAQ,CAACY,QAAQ,CAACb,KAAV,CAAR;AACAG,MAAAA,OAAO,CAACU,QAAQ,CAACG,OAAV,CAAP;AACAX,MAAAA,OAAO,CAACQ,QAAQ,CAACI,OAAV,CAAP;AACH;AACJ,GAnBD;;AAqBAvB,EAAAA,SAAS,CAAC,MAAM;AACZ0B,IAAAA,WAAW,CAAC,MAAMd,YAAY,EAAnB,EAAuB,IAAvB,CAAX;AACH,GAFQ,EAEN,EAFM,CAAT;AAKA,sBACI;AAAA,4BACI;AAAA,gBAAKT,QAAQ,CAACwB;AAAd;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,0CAA0BvB,IAA1B,SAAmCE,KAAnC,SAA6CE,IAA7C,SAAsDE,IAAtD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAvCQR,Q;;KAAAA,Q;AAyCT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react' \n\nfunction Reminder({reminder}) {\n    const [days, setDays] = useState(0)\n    const [hours, setHours] = useState(0)\n    const [mins, setMins] = useState(0)\n    const [secs, setSecs] = useState(0)\n\n\n    const findTimeLeft = () => {\n        const remindDate = reminder.date\n        const present = new Date()\n        const secDiff = (remindDate.getTime() - present.getTime()) / 1000\n        let timeLeft = {}\n\n        if (secDiff > 0) {\n            timeLeft = {\n                days: Math.floor(secDiff / (60 * 60 * 24)),\n                hours: Math.floor((secDiff / (60 * 60)) % 24),\n                minutes: Math.floor((secDiff / 60) % 60),\n                seconds: Math.floor(secDiff % 60)\n            }\n            console.log(timeLeft)\n            setDays(timeLeft.days)\n            setHours(timeLeft.hours)\n            setMins(timeLeft.minutes)\n            setSecs(timeLeft.seconds)\n        }\n    }\n\n    useEffect(() => {\n        setInterval(() => findTimeLeft(), 1000)\n    }, [])\n\n\n    return (\n        <div>\n            <h3>{reminder.text}</h3>\n            <h3>Time until Reminded: {days} D {hours} H {mins} M {secs} S</h3>\n        </div>\n    )\n}\n\nexport default Reminder"]},"metadata":{},"sourceType":"module"}